#!/bin/sh
#
# focus windows

# exit when fullscreen
bspc query -N -n focused.fullscreen > /dev/null && exit

case $1 in
    east)  dir=x; sign=-gt;;
    west)  dir=x; sign=-lt;;
    north) dir=y; sign=-lt;;
    south) dir=y; sign=-gt
esac

# get values for the current window
bspc query -T -n | jq -r '
    if .client.state == "floating" then
        [
            .client.floatingRectangle.x,
            .client.floatingRectangle.y
        ]
    else
        [
            .client.tiledRectangle.x,
            .client.tiledRectangle.y
        ]
    end | @sh' |
{
    read -r cur_x cur_y

    windows=$(
        # get values for all windows on the current desktop
        bspc query -T -d | jq -r '
            .. | .? | select (.client.state != null) |

            if .client.state == "floating" then
                [
                    .client.floatingRectangle.x,
                    .client.floatingRectangle.y,
                    .id
                ]
            else
                [
                    .client.tiledRectangle.x,
                    .client.tiledRectangle.y,
                    .id
                ]
            end | @sh' |
                # sort windows
                while read -r win_x win_y win; do
                    diff_x=$((win_x < cur_x ? - (win_x - cur_x) : win_x - cur_x))
                    diff_y=$((win_y < cur_y ? - (win_y - cur_y) : win_y - cur_y))

                    [ "$dir" = x ] && [ "$win_x" "$sign" "$cur_x" ] && echo "$diff_x $diff_y $win"
                    [ "$dir" = y ] && [ "$win_y" "$sign" "$cur_y" ] && echo "$diff_y $diff_x $win"
                done | sort -k1n -k2n
    )

    # exit if there is no window to focus
    test "$windows" || exit

    # get the closest window
    set -- $windows; focus=$3

    # teleport pointer on the focused window
    bspc config pointer_follows_focus true
    bspc node "$focus" -f
    bspc config pointer_follows_focus false
}
