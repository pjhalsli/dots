#!/usr/bin/env bash
#
# focus windows with bspwm
#
# wm key bindings

case $1 in
    east)  dir=x; sign='>';;
    west)  dir=x; sign='<';;
    north) dir=y; sign='<';;
    south) dir=y; sign='>'
esac

# get the current window status
bspc query -N -n focused.floating > /dev/null && state=floating || state=tiled

read -r nod_x nod_y < <(
    bspc query -T -n | jq -r "
        [
             .client.${state}Rectangle.x
            ,.client.${state}Rectangle.y
        ]
        | @sh"
)

# get values for all windows on the current desktop
windows=$(
    bspc query -T -d | jq -r '
        ..
        | .?
        | select
            (
                .client.state == "floating"
                or
                .client.state == "tiled"
            )

        | if .client.state == "floating" then
            [
                 .client.floatingRectangle.x
                ,.client.floatingRectangle.y
                ,.id
            ]
        else
            [
                 .client.tiledRectangle.x
                ,.client.tiledRectangle.y
                ,.id
            ]
        end
        | @sh'
)

# sort the windows
focus=$(
    while read -r win_x win_y win; do

        diff_x=$((win_x - nod_x))
        diff_y=$((win_y - nod_y))

        diff_x=${diff_x//-}
        diff_y=${diff_y//-}

        [[ $dir == x ]] && ((win_x $sign nod_x)) && echo "$diff_x $diff_y $win"
        [[ $dir == y ]] && ((win_y $sign nod_y)) && echo "$diff_y $diff_x $win"

    done <<< "$windows" | sort -k1n -k2n
)

# properly parse the values
read -r focus <<< "$focus"
set -- $focus; focus=$3

# exit if there is no window to focus
test "$focus" || exit

# teleport pointer on the focused window
bspc config pointer_follows_focus true
bspc node "$focus" -f
bspc config pointer_follows_focus false
